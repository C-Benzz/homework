package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/C-Benzz/assignment1.git/graph/model"
)

// CreateTodo is the resolver for the CreateTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	if input.ID != nil {
		return nil, fmt.Errorf("id must be null")
	}
	newTodo := model.Todo{
		Title: input.Title,
	}
	error := r.DB.AddNewTodo(&newTodo)
	if error != nil {
		return nil, error
	}
	return &newTodo, nil
}

// UpdateTodo is the resolver for the UpdateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input *model.NewTodo) (*model.Todo, error) {
	if input.ID == nil {
		return nil, fmt.Errorf("id must not be null")
	}
	// check existense
	_, error := r.DB.GetTodoByID(*input.ID)
	if error != nil {
		return nil, error
	}

	Todo := model.Todo{ID: *input.ID, Title: input.Title}
	error = r.DB.UpdateTodoByID(Todo)
	if error != nil {
		return nil, error
	}

	return &Todo, nil
}

// DeleteTodo is the resolver for the DeleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	error := r.DB.DeleteTodoByID(id)
	if error != nil {
		return false, error
	}
	return true, nil
}

// GetAllList is the resolver for the GetAllList field.
func (r *queryResolver) GetAllList(ctx context.Context) ([]*model.Todo, error) {
	return r.DB.ListAllTodo(), nil
}

// GetTodoByID is the resolver for the GetTodoByID field.
func (r *queryResolver) GetTodoByID(ctx context.Context, id string) (*model.Todo, error) {
	return r.DB.GetTodoByID(id)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
