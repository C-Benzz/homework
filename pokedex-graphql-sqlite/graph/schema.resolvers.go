package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"pokedex-graphql/graph/model"
)

// Create is the resolver for the Create field.
func (r *mutationResolver) Create(ctx context.Context, input model.NewPokemon) (*model.Pokemon, error) {
	Pokemon := model.Pokemon{
		Name:        input.Name,
		Description: input.Description,
		Category:    input.Category,
		Type:        input.Type,
		Abilities:   input.Abilities,
	}
	err := r.DB.Create(&Pokemon)
	if err.Error != nil {
		return nil, err.Error
	}
	return &Pokemon, nil
}

// Update is the resolver for the Update field.
func (r *mutationResolver) Update(ctx context.Context, id int, input model.NewPokemon) (*model.Pokemon, error) {
	UpdatePokemon := model.Pokemon{
		Name:        input.Name,
		Description: input.Description,
		Category:    input.Category,
		Type:        input.Type,
		Abilities:   input.Abilities,
	}

	err := r.DB.Model(&model.Pokemon{}).Where("id=?", id).Updates(&UpdatePokemon).Error
	if err != nil {
		return nil, err
	}

	return &UpdatePokemon, nil
}

// Delete is the resolver for the Delete field.
func (r *mutationResolver) Delete(ctx context.Context, id int) (bool, error) {
	// err := r.DB.DeletePokemon(id)
	// if err != nil {
	// 	return false, err
	// }
	// return true, nil
	// index := *model.Pokemon{}

	err := r.DB.Model(&model.Pokemon{}).Where("id=?", id).Delete(&id)
	if err.Error != nil {
		return false, err.Error
	}
	return true, nil
}

// AllPokemon is the resolver for the AllPokemon field.
func (r *queryResolver) AllPokemon(ctx context.Context) ([]*model.Pokemon, error) {
	All := []*model.Pokemon{}
	GetAll := r.DB.Find(&All)
	if GetAll.Error != nil {
		return nil, GetAll.Error
	}
	return All, nil
}

// GetPokemonByID is the resolver for the GetPokemonByID field.
func (r *queryResolver) GetPokemonByID(ctx context.Context, id string) (*model.Pokemon, error) {
	PokemonByID := model.Pokemon{}
	if err := r.DB.Model(&model.Pokemon{}).Find(&PokemonByID, id).Error; err != nil {
		return nil, err
	}
	return &PokemonByID, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
