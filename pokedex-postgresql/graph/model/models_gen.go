// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"github.com/uptrace/bun"
)

type NewPokemon struct {
	Name        string        `json:"name"`
	Description string        `json:"description"`
	Category    string        `json:"category"`
	Type        []PokemonType `json:"type"`
	Abilities   []string      `json:"abilities"`
}

type Pokemon struct {
	bun.BaseModel `bun:"table:pokemon,alias:u"`
	ID          int           `json:"id" bun:"id,pk,autoincrement"`
	Name        string        `json:"name" bun:"name,notnull"`
	Description string        `json:"description" bun:"description,notnull"`
	Category    string        `json:"category" bun:"category,notnull"`
	Type        []PokemonType `json:"type" bun:"type,notnull"`
	Abilities   []string      `json:"abilities" bun:"abilities,notnull"`
}

type PokemonType string

const (
	PokemonTypeBug      PokemonType = "Bug"
	PokemonTypeFlying   PokemonType = "Flying"
	PokemonTypeFire     PokemonType = "Fire"
	PokemonTypeGrass    PokemonType = "Grass"
	PokemonTypeWater    PokemonType = "Water"
	PokemonTypePoison   PokemonType = "Poison"
	PokemonTypeElectric PokemonType = "Electric"
)

var AllPokemonType = []PokemonType{
	PokemonTypeBug,
	PokemonTypeFlying,
	PokemonTypeFire,
	PokemonTypeGrass,
	PokemonTypeWater,
	PokemonTypePoison,
	PokemonTypeElectric,
}

func (e PokemonType) IsValid() bool {
	switch e {
	case PokemonTypeBug, PokemonTypeFlying, PokemonTypeFire, PokemonTypeGrass, PokemonTypeWater, PokemonTypePoison, PokemonTypeElectric:
		return true
	}
	return false
}

func (e PokemonType) String() string {
	return string(e)
}

func (e *PokemonType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PokemonType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PokemonType", str)
	}
	return nil
}

func (e PokemonType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
